# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CfJKg3ReU11dKD7zb0aYj_168sG1W7hn

# New Section
"""

import pandas as pd
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier

# Location of dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"


# Assign colum names to the dataset
col_names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'Class']

# Read dataset to pandas dataframe
irisdata = pd.read_csv(url, names=col_names)


X = irisdata.iloc[:, 0:4]
y = irisdata.iloc[:,4:]

le = preprocessing.LabelEncoder()
y=y.apply(le.fit_transform)

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.40)

#scale data for uniform evaluation

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

#Neural-Network
print("Neural-Network: ")

mlp = MLPClassifier(hidden_layer_sizes=(20,10,20), max_iter=1000)
mlp.fit(X_train,y_train.values.ravel())

predictions = mlp.predict(X_test)

print(confusion_matrix(y_test, predictions))
print(classification_report(y_test,predictions))

#KNN
print("KNN: ")

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train,y_train.values.ravel())

predictions = knn.predict(X_test)

print(confusion_matrix(y_test, predictions))
print(classification_report(y_test,predictions))

#Naive-Bayesian
print("Naive-Bayesian: ")

naive_bayes = GaussianNB();
naive_bayes.fit(X_train,y_train.values.ravel())

naive_bayes.predict(X_test)

print(confusion_matrix(y_test, predictions))
print(classification_report(y_test,predictions))


#Decision Tree
print("Decision Tree: ")

decision_tree = DecisionTreeClassifier(criterion="entropy", max_depth=3);
decision_tree.fit(X_train,y_train.values.ravel())

decision_tree.predict(X_test)

print(confusion_matrix(y_test, predictions))
print(classification_report(y_test,predictions))

